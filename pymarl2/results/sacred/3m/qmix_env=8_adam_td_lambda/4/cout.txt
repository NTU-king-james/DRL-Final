[INFO 14:35:23] pymarl Running command 'my_main'
[INFO 14:35:23] pymarl Started run with ID "4"
[DEBUG 14:35:23] pymarl Starting Heartbeat
[DEBUG 14:35:23] my_main Started
[INFO 14:35:23] my_main Experiment Parameters:
[INFO 14:35:23] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'n_rnn',
    'agent_output_type': 'q',
    'batch_size': 128,
    'batch_size_run': 8,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_lr': 0.0005,
    'env': 'sc2',
    'env_args': {   'continuing_episode': False,
                    'debug': False,
                    'difficulty': '7',
                    'game_version': None,
                    'heuristic_ai': False,
                    'heuristic_rest': False,
                    'map_name': '3m',
                    'move_amount': 2,
                    'obs_all_health': True,
                    'obs_instead_of_state': False,
                    'obs_last_action': False,
                    'obs_own_health': True,
                    'obs_pathing_grid': False,
                    'obs_terrain_height': False,
                    'obs_timestep_number': False,
                    'replay_dir': '',
                    'replay_prefix': '',
                    'reward_death_value': 10,
                    'reward_defeat': 0,
                    'reward_negative_scale': 0.5,
                    'reward_only_positive': True,
                    'reward_scale': True,
                    'reward_scale_rate': 20,
                    'reward_sparse': False,
                    'reward_win': 200,
                    'seed': 121008692,
                    'state_last_action': True,
                    'state_timestep_number': False,
                    'step_mul': 8},
    'epsilon_anneal_time': 100000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gain': 0.01,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'label': 'default_label',
    'learner': 'nq_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.001,
    'mac': 'n_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix_env=8_adam_td_lambda',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'optimizer': 'adam',
    'per_alpha': 0.6,
    'per_beta': 0.4,
    'q_lambda': False,
    'repeat_id': 1,
    'return_priority': False,
    'rnn_hidden_dim': 64,
    'run': 'default',
    'runner': 'parallel',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 121008692,
    't_max': 10050000,
    'target_update_interval': 200,
    'td_lambda': 0.6,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': True,
    'use_layer_norm': False,
    'use_orthogonal': False,
    'use_per': False,
    'use_tensorboard': False}

[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:23] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "test"}], "max_tokens": 5}' message='Post details'
[DEBUG 14:35:23] urllib3.util.retry Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:23] urllib3.connectionpool Starting new HTTP connection (1): localhost:11434
[DEBUG 14:35:32] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:32] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:32] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:32] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:32] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 311
[DEBUG 14:35:32] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:32] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:32] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:33] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 306
[DEBUG 14:35:33] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:33] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:33] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:33] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:33] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:33] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 309
[DEBUG 14:35:33] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[INFO 14:35:33] my_main Beginning training for 10050000 timesteps
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 35417 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-cb6wpbwn/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 44385 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-b8j_cver/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 36585 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-q9e9y9h1/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 33413 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-jwno_7d_/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 45077 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-ogjx4i0l/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 43103 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-q7jt8lw8/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 45531 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-723cs3tw/
[INFO 14:35:33] absl Launching SC2: /root/StarCraftII/Versions/Base75689/SC2_x64 -listen 127.0.0.1 -port 40389 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-2erava80/
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:44385/sc2api, attempt: 0, running: True
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 44385 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-b8j_cver/'
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:40389/sc2api, attempt: 0, running: True
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:35417/sc2api, attempt: 0, running: True
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 40389 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-2erava80/'
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 35417 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-cb6wpbwn/'
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:45077/sc2api, attempt: 0, running: True
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:36585/sc2api, attempt: 0, running: True
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:45531/sc2api, attempt: 0, running: True
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:33413/sc2api, attempt: 0, running: True
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 45531 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-723cs3tw/'
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
[INFO 14:35:33] absl Connecting to: ws://127.0.0.1:43103/sc2api, attempt: 0, running: True
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 36585 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-q9e9y9h1/'
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 33413 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-jwno_7d_/'
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 45077 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-ogjx4i0l/'
Version: B75689 (SC2.4.10)
Build: Aug 12 2019 17:16:57
Command Line: '"/root/StarCraftII/Versions/Base75689/SC2_x64" -listen 127.0.0.1 -port 43103 -dataDir /root/StarCraftII/ -tempDir /tmp/sc-q7jt8lw8/'
Starting up...
Starting up...
Starting up...
Starting up...
Starting up...
Startup Phase 1 complete
Startup Phase 1 complete
Starting up...
Starting up...
Starting up...
Startup Phase 1 complete
Startup Phase 1 complete
Startup Phase 1 complete
Startup Phase 1 complete
Startup Phase 1 complete
Startup Phase 1 complete
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:44385/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:35417/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:40389/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:45077/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:33413/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:36585/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:45531/sc2api, attempt: 1, running: True
[INFO 14:35:34] absl Connecting to: ws://127.0.0.1:43103/sc2api, attempt: 1, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:44385/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:40389/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:35417/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:36585/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:45077/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:33413/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:45531/sc2api, attempt: 2, running: True
[INFO 14:35:35] absl Connecting to: ws://127.0.0.1:43103/sc2api, attempt: 2, running: True
Startup Phase 2 complete
Creating stub renderer...
Startup Phase 2 complete
Creating stub renderer...
Startup Phase 2 complete
Creating stub renderer...
Startup Phase 2 complete
Creating stub renderer...
Startup Phase 2 complete
Creating stub renderer...
Startup Phase 2 complete
Creating stub renderer...
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:44385/sc2api, attempt: 3, running: True
Startup Phase 2 complete
Creating stub renderer...
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:40389/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:36585/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:35417/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:45077/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:33413/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:45531/sc2api, attempt: 3, running: True
[INFO 14:35:36] absl Connecting to: ws://127.0.0.1:43103/sc2api, attempt: 3, running: True
Startup Phase 2 complete
Creating stub renderer...
Listening on: 127.0.0.1:44385
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:40389
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:33413
Listening on: 127.0.0.1:35417
Startup Phase 3 complete. Ready for commands.
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:45531
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:45077
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:36585
Startup Phase 3 complete. Ready for commands.
Listening on: 127.0.0.1:43103
Startup Phase 3 complete. Ready for commands.
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:44385/sc2api, attempt: 4, running: True
ConnectHandler: Request from 127.0.0.1:34522 accepted
ReadyHandler: 127.0.0.1:34522 ready
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:40389/sc2api, attempt: 4, running: True
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:35417/sc2api, attempt: 4, running: True
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:36585/sc2api, attempt: 4, running: True
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:33413/sc2api, attempt: 4, running: True
ConnectHandler: Request from 127.0.0.1:42506 accepted
ReadyHandler: 127.0.0.1:42506 ready
ConnectHandler: Request from 127.0.0.1:53276 accepted
ConnectHandler: Request from 127.0.0.1:56280 accepted
ReadyHandler: 127.0.0.1:53276 ready
ReadyHandler: 127.0.0.1:56280 ready
[INFO 14:35:37] absl Connecting to: ws://127.0.0.1:45077/sc2api, attempt: 4, running: True
ConnectHandler: Request from 127.0.0.1:55388 accepted
ReadyHandler: 127.0.0.1:55388 ready
[INFO 14:35:38] absl Connecting to: ws://127.0.0.1:45531/sc2api, attempt: 4, running: True
[INFO 14:35:38] absl Connecting to: ws://127.0.0.1:43103/sc2api, attempt: 4, running: True
ConnectHandler: Request from 127.0.0.1:45552 accepted
ReadyHandler: 127.0.0.1:45552 ready
ConnectHandler: Request from 127.0.0.1:55016 accepted
ReadyHandler: 127.0.0.1:55016 ready
ConnectHandler: Request from 127.0.0.1:43682 accepted
ReadyHandler: 127.0.0.1:43682 ready
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Next launch phase started: 2
Next launch phase started: 3
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 2
Next launch phase started: 3
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
Game has started.
Using default stable ids, none found at: /root/StarCraftII/stableid.json
Successfully loaded stable ids: GameData\stableid.json
Sending ResponseJoinGame
/root/DRL-Final/pymarl2/src/components/episode_buffer.py:103: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:278.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/root/DRL-Final/pymarl2/src/components/episode_buffer.py:103: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:52] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:35:52] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.250\\nrelative y : -0.025\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.275\\nrelative y : 0.000\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:35:54] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 531
[DEBUG 14:35:54] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:55] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 588
[DEBUG 14:35:55] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:56] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 876
[DEBUG 14:35:56] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:58] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 796
[DEBUG 14:35:58] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:35:58] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 997
[DEBUG 14:35:58] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:00] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 773
[DEBUG 14:36:00] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:00] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 394
[DEBUG 14:36:00] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:01] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 973
[DEBUG 14:36:01] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.213\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.188\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.248\\nrelative y : 0.012\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.289\\nrelative y : 0.003\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.223\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.251\\nrelative y : 0.010\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.289\\nrelative y : 0.006\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : -0.040\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.210\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.290\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.286\\nrelative y : -0.036\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.256\\nrelative y : -0.030\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.261\\nrelative y : 0.003\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.065\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.210\\nrelative y : 0.000\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.185\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.062\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.037\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:01] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:01] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.211\\nrelative y : -0.028\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.254\\nrelative y : -0.038\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.261\\nrelative y : 0.003\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.210\\nrelative y : -0.024\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.234\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:04] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 701
[DEBUG 14:36:04] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:05] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 861
[DEBUG 14:36:05] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:06] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 554
[DEBUG 14:36:06] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:07] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 586
[DEBUG 14:36:07] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:07] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 533
[DEBUG 14:36:07] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:09] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 578
[DEBUG 14:36:09] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:09] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 299
[DEBUG 14:36:09] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:11] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 930
[DEBUG 14:36:11] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.210\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.217\\nrelative y : 0.039\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.222\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.288\\nrelative y : 0.012\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.329\\nrelative y : 0.003\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.183\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.309\\nrelative y : -0.048\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.295\\nrelative y : -0.028\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.261\\nrelative y : 0.003\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.247\\nrelative y : -0.024\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.329\\nrelative y : 0.006\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.265\\nrelative y : -0.040\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.210\\nrelative y : 0.016\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.290\\nrelative y : 0.040\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.266\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.240\\nrelative y : -0.042\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.261\\nrelative y : -0.071\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.065\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.210\\nrelative y : 0.040\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.185\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:11] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:11] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.211\\nrelative y : -0.068\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.214\\nrelative y : -0.037\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.221\\nrelative y : 0.003\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.170\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.194\\nrelative y : 0.001\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:12] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 528
[DEBUG 14:36:12] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:15] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 1267
[DEBUG 14:36:15] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:16] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 1047
[DEBUG 14:36:16] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:18] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 818
[DEBUG 14:36:18] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:18] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 751
[DEBUG 14:36:18] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:20] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 585
[DEBUG 14:36:20] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:21] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 1027
[DEBUG 14:36:21] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:22] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 644
[DEBUG 14:36:22] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.246\\nrelative y : -0.064\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.369\\nrelative y : 0.006\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.270\\nrelative y : -0.002\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.309\\nrelative y : -0.088\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.255\\nrelative y : -0.028\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.301\\nrelative y : 0.003\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.170\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.217\\nrelative y : 0.039\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.222\\nrelative y : 0.000\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.327\\nrelative y : 0.017\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.299\\nrelative y : -0.010\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.223\\nrelative y : 0.001\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.237\\nrelative y : -0.042\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.261\\nrelative y : -0.031\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.225\\nrelative y : 0.040\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : -0.025\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.170\\nrelative y : 0.040\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.185\\nrelative y : -0.040\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.250\\nrelative y : 0.016\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.330\\nrelative y : 0.040\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.267\\nrelative y : -0.002\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:22] openai message='Request to OpenAI API' method=post path=http://localhost:11434/v1/chat/completions
[DEBUG 14:36:22] openai api_version=None data='{"model": "llama3:latest", "messages": [{"role": "user", "content": "You are an AI agent controlling 3 units in a StarCraft II scenario.\\nYour objective is to defeat all enemy units by issuing commands to your units.\\n--- CURRENT GLOBAL STATE ---\\nALLY #1:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.202\\nrelative y : -0.037\\nunit type : Marine\\nALLY #2:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.224\\nrelative y : -0.071\\nunit type : Marine\\nALLY #3:\\nhealth : 100.0%\\nweapon cooldown : 0.0%\\nrelative x : -0.221\\nrelative y : 0.043\\nunit type : Marine\\nENEMY #1:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : 0.002\\nunit type : Marine\\nENEMY #2:\\nhealth : 100.0%\\nrelative x : 0.129\\nrelative y : -0.023\\nunit type : Marine\\nENEMY #3:\\nhealth : 100.0%\\nrelative x : 0.154\\nrelative y : 0.002\\nunit type : Marine\\n\\n--- ORDERS FOR YOUR UNITS ---\\nFor each of your 3 units, select one action from its list of available actions.\\nIn the last line respond with a formatted list of integer action IDs, one for each unit.\\nFor example, to order agent 0, 1, 2 to perform action ID 0, 1, 5 respectively, output: [0, 1, 5]\\nMake sure the action ID given to each agent is available for each agent.\\n-- Unit 0 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 1 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\n-- Unit 2 --\\nAvailable Actions (ID: Description):\\n - ID 1: stop\\n - ID 2: move_north\\n - ID 3: move_south\\n - ID 4: move_east\\n - ID 5: move_west\\n\\nBased on the state and available actions, provide the list of 3 action IDs for your units."}]}' message='Post details'
[DEBUG 14:36:23] urllib3.connectionpool http://localhost:11434 "POST /v1/chat/completions HTTP/11" 200 577
[DEBUG 14:36:23] openai message='OpenAI API response' path=http://localhost:11434/v1/chat/completions processing_ms=None request_id=None response_code=200
